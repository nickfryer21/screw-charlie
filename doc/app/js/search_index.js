var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","board","card","datatools","deck","drawcard","drawpile","game","gamecontroller","gamehelper","gameplayer","hand","homecontroller","homehelper","move","movecard","pilebehavior","playcard","player","playeraction","playercontroller","playerhelper","playersession","slot","token","turn","ace_high_run?()","add_card()","add_player()","add_slot()","add_slots()","advance_turn()","book?()","build()","can_add_player?()","can_start?()","card_in_source_deck?()","create()","create()","deal_cards()","destroy()","destroy()","draw_card()","edit()","edit()","find_available_games()","find_by_token()","game_player()","get_player_options_for_select()","has_valid_suit?()","index()","index()","index()","join()","new()","new()","new()","on_pile_changed()","play()","play_game()","playable_card?()","player_status()","points()","points()","purge()","rank_in_range?()","remove_card()","run()","run?()","show()","show()","shuffle!()","start()","tables()","test()","to_s()","to_s()","update()","update()","whose_turn()","readme"],"longSearchIndex":["applicationcontroller","applicationhelper","board","card","datatools","deck","drawcard","drawpile","game","gamecontroller","gamehelper","gameplayer","hand","homecontroller","homehelper","move","movecard","pilebehavior","playcard","player","playeraction","playercontroller","playerhelper","playersession","slot","token","turn","deck#ace_high_run?()","deck#add_card()","game#add_player()","game#add_slot()","game#add_slots()","game#advance_turn()","deck#book?()","drawpile::build()","game#can_add_player?()","game#can_start?()","movecard#card_in_source_deck?()","gamecontroller#create()","playercontroller#create()","game#deal_cards()","gamecontroller#destroy()","playercontroller#destroy()","drawpile#draw_card()","gamecontroller#edit()","playercontroller#edit()","game::find_available_games()","playersession::find_by_token()","playersession#game_player()","player::get_player_options_for_select()","card#has_valid_suit?()","gamecontroller#index()","homecontroller#index()","playercontroller#index()","gamecontroller#join()","gamecontroller#new()","playercontroller#new()","token::new()","pilebehavior#on_pile_changed()","gamecontroller#play()","game#play_game()","deck#playable_card?()","game#player_status()","card#points()","deck#points()","card::purge()","card#rank_in_range?()","deck#remove_card()","movecard#run()","deck#run?()","gamecontroller#show()","playercontroller#show()","drawpile#shuffle!()","game#start()","datatools::tables()","homecontroller#test()","card#to_s()","token#to_s()","gamecontroller#update()","playercontroller#update()","game#whose_turn()",""],"info":[["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Board","","Board.html","",""],["Card","","Card.html","",""],["DataTools","","DataTools.html","",""],["Deck","","Deck.html","",""],["DrawCard","","DrawCard.html","",""],["DrawPile","","DrawPile.html","",""],["Game","","Game.html","",""],["GameController","","GameController.html","",""],["GameHelper","","GameHelper.html","",""],["GamePlayer","","GamePlayer.html","",""],["Hand","","Hand.html","",""],["HomeController","","HomeController.html","",""],["HomeHelper","","HomeHelper.html","",""],["Move","","Move.html","",""],["MoveCard","","MoveCard.html","",""],["PileBehavior","","PileBehavior.html","",""],["PlayCard","","PlayCard.html","",""],["Player","","Player.html","",""],["PlayerAction","","PlayerAction.html","",""],["PlayerController","","PlayerController.html","",""],["PlayerHelper","","PlayerHelper.html","",""],["PlayerSession","","PlayerSession.html","",""],["Slot","","Slot.html","",""],["Token","","Token.html","",""],["Turn","","Turn.html","",""],["ace_high_run?","Deck","Deck.html#method-i-ace_high_run-3F","()",""],["add_card","Deck","Deck.html#method-i-add_card","(card)",""],["add_player","Game","Game.html#method-i-add_player","(player)","<p>@param [Player] player\n"],["add_slot","Game","Game.html#method-i-add_slot","(slot = nil)","<p>@param [Slot] slot\n"],["add_slots","Game","Game.html#method-i-add_slots","(count)","<p>@param [Integer] count\n"],["advance_turn","Game","Game.html#method-i-advance_turn","()",""],["book?","Deck","Deck.html#method-i-book-3F","()",""],["build","DrawPile","DrawPile.html#method-c-build","(shuffle = true)",""],["can_add_player?","Game","Game.html#method-i-can_add_player-3F","(player)","<p>@param [Player] player\n"],["can_start?","Game","Game.html#method-i-can_start-3F","()",""],["card_in_source_deck?","MoveCard","MoveCard.html#method-i-card_in_source_deck-3F","()",""],["create","GameController","GameController.html#method-i-create","()","<p>url &mdash; POST game/create\n\n"],["create","PlayerController","PlayerController.html#method-i-create","()",""],["deal_cards","Game","Game.html#method-i-deal_cards","()",""],["destroy","GameController","GameController.html#method-i-destroy","()","<p>url &mdash; DELETE game/destroy\n\n"],["destroy","PlayerController","PlayerController.html#method-i-destroy","()",""],["draw_card","DrawPile","DrawPile.html#method-i-draw_card","()",""],["edit","GameController","GameController.html#method-i-edit","()","<p>url &mdash; GET game/edit\n\n"],["edit","PlayerController","PlayerController.html#method-i-edit","()",""],["find_available_games","Game","Game.html#method-c-find_available_games","(player)","<p>Finds all games for which the specified can join. A players may join a game\nthat has open slots or that …\n"],["find_by_token","PlayerSession","PlayerSession.html#method-c-find_by_token","(token)",""],["game_player","PlayerSession","PlayerSession.html#method-i-game_player","()",""],["get_player_options_for_select","Player","Player.html#method-c-get_player_options_for_select","()",""],["has_valid_suit?","Card","Card.html#method-i-has_valid_suit-3F","()",""],["index","GameController","GameController.html#method-i-index","()","<p>url &mdash; GET game/index\n\n"],["index","HomeController","HomeController.html#method-i-index","()",""],["index","PlayerController","PlayerController.html#method-i-index","()",""],["join","GameController","GameController.html#method-i-join","()","<p>url &mdash; PUT game/join\n\n"],["new","GameController","GameController.html#method-i-new","()","<p>url &mdash; GET game/new\n\n"],["new","PlayerController","PlayerController.html#method-i-new","()",""],["new","Token","Token.html#method-c-new","(value = nil)",""],["on_pile_changed","PileBehavior","PileBehavior.html#method-i-on_pile_changed","()",""],["play","GameController","GameController.html#method-i-play","()","<p>url &mdash; GET game/play\n\n"],["play_game","Game","Game.html#method-i-play_game","()",""],["playable_card?","Deck","Deck.html#method-i-playable_card-3F","(card)",""],["player_status","Game","Game.html#method-i-player_status","()",""],["points","Card","Card.html#method-i-points","()",""],["points","Deck","Deck.html#method-i-points","()",""],["purge","Card","Card.html#method-c-purge","()",""],["rank_in_range?","Card","Card.html#method-i-rank_in_range-3F","()",""],["remove_card","Deck","Deck.html#method-i-remove_card","(card)",""],["run","MoveCard","MoveCard.html#method-i-run","()",""],["run?","Deck","Deck.html#method-i-run-3F","()",""],["show","GameController","GameController.html#method-i-show","()","<p>url &mdash; GET game/show/$id(.:format)\n\n"],["show","PlayerController","PlayerController.html#method-i-show","()",""],["shuffle!","DrawPile","DrawPile.html#method-i-shuffle-21","()",""],["start","Game","Game.html#method-i-start","()",""],["tables","DataTools","DataTools.html#method-c-tables","()",""],["test","HomeController","HomeController.html#method-i-test","()",""],["to_s","Card","Card.html#method-i-to_s","()",""],["to_s","Token","Token.html#method-i-to_s","()",""],["update","GameController","GameController.html#method-i-update","()","<p>url &mdash; PUT game/update\n\n"],["update","PlayerController","PlayerController.html#method-i-update","()",""],["whose_turn","Game","Game.html#method-i-whose_turn","()","<p>returns the players of the active turn @return [GamePlayer]\n"],["README","","README_rdoc.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and …\n"]]}}